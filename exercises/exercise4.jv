pipeline TemperaturePipeline {

    TemperatureFileDownloader -> ZipArchiveInterpreter;

    ZipArchiveInterpreter
    -> TemperatureFilePicker
    -> TemperatureTextInterpreter
    -> TemperatureCSVInterpreter
    -> RenameTemperaturCellWriter
    -> RenameTemperaturBatteryCellWriter
    -> TemperatureColumnDeleter
    -> TemperatureTableInterpreter
    -> CelsiusToFahrenheitTemperatur
    -> CelsiusToFahrenheitBatterietemperatur
    -> TemperatureLoader;

    // 1. As a first step, we download the zip file and interpret it.
    block TemperatureFileDownloader oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block ZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block TemperatureFilePicker oftype FilePicker { 
        path: "/data.csv";
    }
    
    block TemperatureTextInterpreter oftype TextFileInterpreter {}

    block TemperatureCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    // 2. Rename the two headers.
    block RenameTemperaturCellWriter oftype CellWriter {
        at: cell E1;
        write: ["Temperatur"]; 
    }

    block RenameTemperaturBatteryCellWriter oftype CellWriter {
        at: cell J1;
        write: ["Batterietemperatur"]; 
    }

    // 3. Delete uncessary columns
    block TemperatureColumnDeleter oftype ColumnDeleter {
        delete: [column F, column G, column H, column I];
    }
    
    // 4. Define the table
    block TemperatureTableInterpreter oftype TableInterpreter    {
        header: false;
        columns: [
            "Geraet" oftype validGeraet,
            "Hersteller" oftype text,
            "Model" oftype text,
            "Monat" oftype ValidMonat,
            "Temperatur" oftype decimal,
            "Batterietemperatur" oftype decimal,
            "Geraet aktiv" oftype geraetStatus
        ];
    }

    // 5. Define constraints
    block CelsiusToFahrenheitTemperatur oftype TableTransformer {
        inputColumns: ['Temperatur'];
        outputColumn: 'Temperatur';
        use: CelsiusToFahrenheit;
    }

    block CelsiusToFahrenheitBatterietemperatur oftype TableTransformer {
        inputColumns: ['Batterietemperatur'];
        outputColumn: 'Batterietemperatur';
        use: CelsiusToFahrenheit;
    }

    transform CelsiusToFahrenheit {
        from tempCelsius oftype decimal;
        to tempFahrenheit oftype decimal;

        tempFahrenheit: (tempCelsius * 9/5) + 32; 
    }

    valuetype validGeraet oftype integer {
        constraints: [ validGeraetConstraint ];
    } 

    constraint validGeraetConstraint on decimal: 
        value > 0; 

    valuetype geraetStatus oftype text {
        constraints: [
            geraetStatusList,
        ];
    }

    valuetype ValidMonat oftype integer {
        constraints: [
            ValidMonatConstraint,
        ];
    }

    constraint ValidMonatConstraint oftype RangeConstraint {
        lowerBound: 0;
        lowerBoundInclusive: true;
        upperBound: 12;
        upperBoundInclusive: true;
    }

    constraint geraetStatusList on text:
        value in [
            "Ja", "Nein"
        ];
    
    // 6. Load the data in sql table 
    block TemperatureLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }

}